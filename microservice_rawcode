server main module configuration

main.ts

import { NestFactory } from '@nestjs/core';
import { MicroserviceOptions ,Transport } from '@nestjs/microservices';
import { AppModule } from './app.module';

const rabbidMQ : MicroserviceOptions ={
  transport: Transport.RMQ,
  options: {
    urls: ['amqp://guest:guest@localhost:5672'],
    queue: 'notification_queue',
    queueOptions: {
      durable: false
    },
  },
}

async function bootstrap() {
  const app =await  NestFactory.createMicroservice(AppModule,rabbidMQ)
  await app.listen()
}

bootstrap()
---------------------------------------------------------------
client module configuration

import { ClientsModule, Transport } from '@nestjs/microservices';

const clientmodule= ClientsModule.register([
    {
      name: 'NOTIFICATION_USER_SERVICE',
      transport: Transport.RMQ,
      options: {
        urls: ['amqp://guest:guest@localhost:5672'],
        queue: 'notification_queue',
        queueOptions: {
          durable: false
        },
      },
    },
  ])
  
@Module({
    imports: [clientmodule]
})
-----------------------------------------------
client controller  pass the date to main que


import { ClientProxy, } from '@nestjs/microservices';

@Controller()
export class UsersController {
    constructor(
         @Inject('NOTIFICATION_USER_SERVICE') private readonly client:ClientProxy
        ) { }

@Post('/user')
async create(){
 this.client.emit('hello','passing data')
}
        
}






















